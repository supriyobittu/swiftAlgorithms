/*Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially 
adjacent cells, where adjacent cells are horizontally or vertically neighboring. 
The same letter cell may not be used more than once.
Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
*/


func exist(_ board: [[Character]], _ word: String) -> Bool {
        var rows = board.count, cols = board[0].count
        
        var wordArr = Array(word)
        var path = Array(repeating:Array(repeating:false,count:cols),count:rows)
        
        func dfs(_ r: Int, _ c: Int, _ i: Int) -> Bool {
            if (i == word.count) {
                return true
            }
            if (r < 0 || c < 0 || r >= rows ||
                       c >= cols || wordArr[i] != board[r][c] || path[r][c]) {
                return false
            } 
            path[r][c] = true
            var res = (dfs(r + 1,c,i+1) || dfs(r - 1,c,i+1) || dfs(r,c + 1,i+1) || dfs(r,c - 1,i+1))
                       path[r][c] = false
            return res
            
        }
        for r in 0..<rows {
            for c in 0..<cols {
            if dfs(r,c,0) {
                return true
            }
            }
        }
        return false
            
    } 